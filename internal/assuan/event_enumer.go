// Code generated by "enumer -type=Event -text -transform upper"; DO NOT EDIT.

package assuan

import (
	"fmt"
	"strings"
)

const _EventName = "INVALIDEVENTCONNECTRESETOPTIONGETINFOHAVEKEYKEYINFOSIGKEYSETKEYDESCSETHASHPKSIGNSETKEYPKDECRYPTSCD"

var _EventIndex = [...]uint8{0, 12, 19, 24, 30, 37, 44, 51, 57, 67, 74, 80, 86, 95, 98}

const _EventLowerName = "invalideventconnectresetoptiongetinfohavekeykeyinfosigkeysetkeydescsethashpksignsetkeypkdecryptscd"

func (i Event) String() string {
	if i < 0 || i >= Event(len(_EventIndex)-1) {
		return fmt.Sprintf("Event(%d)", i)
	}
	return _EventName[_EventIndex[i]:_EventIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EventNoOp() {
	var x [1]struct{}
	_ = x[invalidEvent-(0)]
	_ = x[connect-(1)]
	_ = x[reset-(2)]
	_ = x[option-(3)]
	_ = x[getinfo-(4)]
	_ = x[havekey-(5)]
	_ = x[keyinfo-(6)]
	_ = x[sigkey-(7)]
	_ = x[setkeydesc-(8)]
	_ = x[sethash-(9)]
	_ = x[pksign-(10)]
	_ = x[setkey-(11)]
	_ = x[pkdecrypt-(12)]
	_ = x[scd-(13)]
}

var _EventValues = []Event{invalidEvent, connect, reset, option, getinfo, havekey, keyinfo, sigkey, setkeydesc, sethash, pksign, setkey, pkdecrypt, scd}

var _EventNameToValueMap = map[string]Event{
	_EventName[0:12]:       invalidEvent,
	_EventLowerName[0:12]:  invalidEvent,
	_EventName[12:19]:      connect,
	_EventLowerName[12:19]: connect,
	_EventName[19:24]:      reset,
	_EventLowerName[19:24]: reset,
	_EventName[24:30]:      option,
	_EventLowerName[24:30]: option,
	_EventName[30:37]:      getinfo,
	_EventLowerName[30:37]: getinfo,
	_EventName[37:44]:      havekey,
	_EventLowerName[37:44]: havekey,
	_EventName[44:51]:      keyinfo,
	_EventLowerName[44:51]: keyinfo,
	_EventName[51:57]:      sigkey,
	_EventLowerName[51:57]: sigkey,
	_EventName[57:67]:      setkeydesc,
	_EventLowerName[57:67]: setkeydesc,
	_EventName[67:74]:      sethash,
	_EventLowerName[67:74]: sethash,
	_EventName[74:80]:      pksign,
	_EventLowerName[74:80]: pksign,
	_EventName[80:86]:      setkey,
	_EventLowerName[80:86]: setkey,
	_EventName[86:95]:      pkdecrypt,
	_EventLowerName[86:95]: pkdecrypt,
	_EventName[95:98]:      scd,
	_EventLowerName[95:98]: scd,
}

var _EventNames = []string{
	_EventName[0:12],
	_EventName[12:19],
	_EventName[19:24],
	_EventName[24:30],
	_EventName[30:37],
	_EventName[37:44],
	_EventName[44:51],
	_EventName[51:57],
	_EventName[57:67],
	_EventName[67:74],
	_EventName[74:80],
	_EventName[80:86],
	_EventName[86:95],
	_EventName[95:98],
}

// EventString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventString(s string) (Event, error) {
	if val, ok := _EventNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _EventNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Event values", s)
}

// EventValues returns all values of the enum
func EventValues() []Event {
	return _EventValues
}

// EventStrings returns a slice of all String values of the enum
func EventStrings() []string {
	strs := make([]string, len(_EventNames))
	copy(strs, _EventNames)
	return strs
}

// IsAEvent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Event) IsAEvent() bool {
	for _, v := range _EventValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Event
func (i Event) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Event
func (i *Event) UnmarshalText(text []byte) error {
	var err error
	*i, err = EventString(string(text))
	return err
}
